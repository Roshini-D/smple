# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from svaya_control/Tool.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Tool(genpy.Message):
  _md5sum = "3ee97d849631d40fd56f1eb1fec29f41"
  _type = "svaya_control/Tool"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 tool_cnt
float64[]  tool_position_x
float64[]  tool_position_y
float64[]  tool_position_z
float64[]  tool_radius

float64  cone_orient_x
float64  cone_orient_y
float64  cone_orient_z
float64  tool_direction_feat
float64  solid_angle
float64  pan_angle
float64  tilt_angle

"""
  __slots__ = ['tool_cnt','tool_position_x','tool_position_y','tool_position_z','tool_radius','cone_orient_x','cone_orient_y','cone_orient_z','tool_direction_feat','solid_angle','pan_angle','tilt_angle']
  _slot_types = ['uint8','float64[]','float64[]','float64[]','float64[]','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tool_cnt,tool_position_x,tool_position_y,tool_position_z,tool_radius,cone_orient_x,cone_orient_y,cone_orient_z,tool_direction_feat,solid_angle,pan_angle,tilt_angle

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Tool, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.tool_cnt is None:
        self.tool_cnt = 0
      if self.tool_position_x is None:
        self.tool_position_x = []
      if self.tool_position_y is None:
        self.tool_position_y = []
      if self.tool_position_z is None:
        self.tool_position_z = []
      if self.tool_radius is None:
        self.tool_radius = []
      if self.cone_orient_x is None:
        self.cone_orient_x = 0.
      if self.cone_orient_y is None:
        self.cone_orient_y = 0.
      if self.cone_orient_z is None:
        self.cone_orient_z = 0.
      if self.tool_direction_feat is None:
        self.tool_direction_feat = 0.
      if self.solid_angle is None:
        self.solid_angle = 0.
      if self.pan_angle is None:
        self.pan_angle = 0.
      if self.tilt_angle is None:
        self.tilt_angle = 0.
    else:
      self.tool_cnt = 0
      self.tool_position_x = []
      self.tool_position_y = []
      self.tool_position_z = []
      self.tool_radius = []
      self.cone_orient_x = 0.
      self.cone_orient_y = 0.
      self.cone_orient_z = 0.
      self.tool_direction_feat = 0.
      self.solid_angle = 0.
      self.pan_angle = 0.
      self.tilt_angle = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.tool_cnt
      buff.write(_get_struct_B().pack(_x))
      length = len(self.tool_position_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tool_position_x))
      length = len(self.tool_position_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tool_position_y))
      length = len(self.tool_position_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tool_position_z))
      length = len(self.tool_radius)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.tool_radius))
      _x = self
      buff.write(_get_struct_7d().pack(_x.cone_orient_x, _x.cone_orient_y, _x.cone_orient_z, _x.tool_direction_feat, _x.solid_angle, _x.pan_angle, _x.tilt_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.tool_cnt,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_position_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_position_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_position_z = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_radius = s.unpack(str[start:end])
      _x = self
      start = end
      end += 56
      (_x.cone_orient_x, _x.cone_orient_y, _x.cone_orient_z, _x.tool_direction_feat, _x.solid_angle, _x.pan_angle, _x.tilt_angle,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.tool_cnt
      buff.write(_get_struct_B().pack(_x))
      length = len(self.tool_position_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tool_position_x.tostring())
      length = len(self.tool_position_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tool_position_y.tostring())
      length = len(self.tool_position_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tool_position_z.tostring())
      length = len(self.tool_radius)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.tool_radius.tostring())
      _x = self
      buff.write(_get_struct_7d().pack(_x.cone_orient_x, _x.cone_orient_y, _x.cone_orient_z, _x.tool_direction_feat, _x.solid_angle, _x.pan_angle, _x.tilt_angle))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.tool_cnt,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_position_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_position_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_position_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.tool_radius = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 56
      (_x.cone_orient_x, _x.cone_orient_y, _x.cone_orient_z, _x.tool_direction_feat, _x.solid_angle, _x.pan_angle, _x.tilt_angle,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
