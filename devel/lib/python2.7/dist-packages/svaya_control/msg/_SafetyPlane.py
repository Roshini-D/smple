# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from svaya_control/SafetyPlane.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SafetyPlane(genpy.Message):
  _md5sum = "660c688686d98eb493ccc943cb987589"
  _type = "svaya_control/SafetyPlane"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint8 plane_cnt
float64[]  plane_origin_x
float64[]  plane_origin_y
float64[]  plane_origin_z

float64[]  normal_dir_x
float64[]  normal_dir_y
float64[]  normal_dir_z

float64[]  safety_feat
float64[]  elbow_restrict
"""
  __slots__ = ['plane_cnt','plane_origin_x','plane_origin_y','plane_origin_z','normal_dir_x','normal_dir_y','normal_dir_z','safety_feat','elbow_restrict']
  _slot_types = ['uint8','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       plane_cnt,plane_origin_x,plane_origin_y,plane_origin_z,normal_dir_x,normal_dir_y,normal_dir_z,safety_feat,elbow_restrict

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SafetyPlane, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.plane_cnt is None:
        self.plane_cnt = 0
      if self.plane_origin_x is None:
        self.plane_origin_x = []
      if self.plane_origin_y is None:
        self.plane_origin_y = []
      if self.plane_origin_z is None:
        self.plane_origin_z = []
      if self.normal_dir_x is None:
        self.normal_dir_x = []
      if self.normal_dir_y is None:
        self.normal_dir_y = []
      if self.normal_dir_z is None:
        self.normal_dir_z = []
      if self.safety_feat is None:
        self.safety_feat = []
      if self.elbow_restrict is None:
        self.elbow_restrict = []
    else:
      self.plane_cnt = 0
      self.plane_origin_x = []
      self.plane_origin_y = []
      self.plane_origin_z = []
      self.normal_dir_x = []
      self.normal_dir_y = []
      self.normal_dir_z = []
      self.safety_feat = []
      self.elbow_restrict = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.plane_cnt
      buff.write(_get_struct_B().pack(_x))
      length = len(self.plane_origin_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.plane_origin_x))
      length = len(self.plane_origin_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.plane_origin_y))
      length = len(self.plane_origin_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.plane_origin_z))
      length = len(self.normal_dir_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.normal_dir_x))
      length = len(self.normal_dir_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.normal_dir_y))
      length = len(self.normal_dir_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.normal_dir_z))
      length = len(self.safety_feat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.safety_feat))
      length = len(self.elbow_restrict)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.elbow_restrict))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.plane_cnt,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.plane_origin_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.plane_origin_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.plane_origin_z = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.normal_dir_x = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.normal_dir_y = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.normal_dir_z = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.safety_feat = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.elbow_restrict = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.plane_cnt
      buff.write(_get_struct_B().pack(_x))
      length = len(self.plane_origin_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.plane_origin_x.tostring())
      length = len(self.plane_origin_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.plane_origin_y.tostring())
      length = len(self.plane_origin_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.plane_origin_z.tostring())
      length = len(self.normal_dir_x)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.normal_dir_x.tostring())
      length = len(self.normal_dir_y)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.normal_dir_y.tostring())
      length = len(self.normal_dir_z)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.normal_dir_z.tostring())
      length = len(self.safety_feat)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.safety_feat.tostring())
      length = len(self.elbow_restrict)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.elbow_restrict.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.plane_cnt,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.plane_origin_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.plane_origin_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.plane_origin_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.normal_dir_x = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.normal_dir_y = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.normal_dir_z = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.safety_feat = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.elbow_restrict = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
