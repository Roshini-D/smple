// Generated by gencpp from file svaya_control/SafetyData.msg
// DO NOT EDIT!


#ifndef SVAYA_CONTROL_MESSAGE_SAFETYDATA_H
#define SVAYA_CONTROL_MESSAGE_SAFETYDATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <svaya_control/JointLimit.h>
#include <svaya_control/SafetyPlane.h>
#include <svaya_control/Tool.h>

namespace svaya_control
{
template <class ContainerAllocator>
struct SafetyData_
{
  typedef SafetyData_<ContainerAllocator> Type;

  SafetyData_()
    : Robot_limits()
    , JointLimitdata()
    , SafetyPlanedata()
    , Tooldata()
    , SafetyInputIo()
    , underSingularity(false)
    , too_close_point(false)
    , safety_flag(false)  {
    }
  SafetyData_(const ContainerAllocator& _alloc)
    : Robot_limits(_alloc)
    , JointLimitdata(_alloc)
    , SafetyPlanedata(_alloc)
    , Tooldata(_alloc)
    , SafetyInputIo(_alloc)
    , underSingularity(false)
    , too_close_point(false)
    , safety_flag(false)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _Robot_limits_type;
  _Robot_limits_type Robot_limits;

   typedef std::vector< ::svaya_control::JointLimit_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::svaya_control::JointLimit_<ContainerAllocator> >::other >  _JointLimitdata_type;
  _JointLimitdata_type JointLimitdata;

   typedef std::vector< ::svaya_control::SafetyPlane_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::svaya_control::SafetyPlane_<ContainerAllocator> >::other >  _SafetyPlanedata_type;
  _SafetyPlanedata_type SafetyPlanedata;

   typedef std::vector< ::svaya_control::Tool_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::svaya_control::Tool_<ContainerAllocator> >::other >  _Tooldata_type;
  _Tooldata_type Tooldata;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _SafetyInputIo_type;
  _SafetyInputIo_type SafetyInputIo;

   typedef uint8_t _underSingularity_type;
  _underSingularity_type underSingularity;

   typedef uint8_t _too_close_point_type;
  _too_close_point_type too_close_point;

   typedef uint8_t _safety_flag_type;
  _safety_flag_type safety_flag;





  typedef boost::shared_ptr< ::svaya_control::SafetyData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svaya_control::SafetyData_<ContainerAllocator> const> ConstPtr;

}; // struct SafetyData_

typedef ::svaya_control::SafetyData_<std::allocator<void> > SafetyData;

typedef boost::shared_ptr< ::svaya_control::SafetyData > SafetyDataPtr;
typedef boost::shared_ptr< ::svaya_control::SafetyData const> SafetyDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svaya_control::SafetyData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svaya_control::SafetyData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::svaya_control::SafetyData_<ContainerAllocator1> & lhs, const ::svaya_control::SafetyData_<ContainerAllocator2> & rhs)
{
  return lhs.Robot_limits == rhs.Robot_limits &&
    lhs.JointLimitdata == rhs.JointLimitdata &&
    lhs.SafetyPlanedata == rhs.SafetyPlanedata &&
    lhs.Tooldata == rhs.Tooldata &&
    lhs.SafetyInputIo == rhs.SafetyInputIo &&
    lhs.underSingularity == rhs.underSingularity &&
    lhs.too_close_point == rhs.too_close_point &&
    lhs.safety_flag == rhs.safety_flag;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::svaya_control::SafetyData_<ContainerAllocator1> & lhs, const ::svaya_control::SafetyData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace svaya_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::SafetyData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::SafetyData_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::SafetyData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::SafetyData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::SafetyData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::SafetyData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svaya_control::SafetyData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72b89a176f586ae89e501cc07a269f6d";
  }

  static const char* value(const ::svaya_control::SafetyData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72b89a176f586ae8ULL;
  static const uint64_t static_value2 = 0x9e501cc07a269f6dULL;
};

template<class ContainerAllocator>
struct DataType< ::svaya_control::SafetyData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svaya_control/SafetyData";
  }

  static const char* value(const ::svaya_control::SafetyData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svaya_control::SafetyData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] Robot_limits\n"
"\n"
"JointLimit[] JointLimitdata \n"
"\n"
"SafetyPlane[] SafetyPlanedata\n"
"\n"
"Tool[]   Tooldata\n"
"\n"
"int32[] SafetyInputIo\n"
"\n"
"bool underSingularity\n"
"bool too_close_point \n"
"bool safety_flag\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: svaya_control/JointLimit\n"
"uint8 joint_cnt\n"
"float64[] joint_max_pos_limit_normal_mode\n"
"float64[] joint_min_pos_limit_normal_mode\n"
"float64[] joint_max_pos_limit_reduced_mode\n"
"float64[] joint_min_pos_limit_reduced_mode\n"
"float64[] joint_vel_limit_reduced_mode\n"
"float64[] joint_vel_limit_normal_mode\n"
"\n"
"\n"
"================================================================================\n"
"MSG: svaya_control/SafetyPlane\n"
"uint8 plane_cnt\n"
"float64[]  plane_origin_x\n"
"float64[]  plane_origin_y\n"
"float64[]  plane_origin_z\n"
"\n"
"float64[]  normal_dir_x\n"
"float64[]  normal_dir_y\n"
"float64[]  normal_dir_z\n"
"\n"
"float64[]  safety_feat\n"
"float64[]  elbow_restrict\n"
"\n"
"================================================================================\n"
"MSG: svaya_control/Tool\n"
"uint8 tool_cnt\n"
"float64[]  tool_position_x\n"
"float64[]  tool_position_y\n"
"float64[]  tool_position_z\n"
"float64[]  tool_radius\n"
"\n"
"float64  cone_orient_x\n"
"float64  cone_orient_y\n"
"float64  cone_orient_z\n"
"float64  tool_direction_feat\n"
"float64  solid_angle\n"
"float64  pan_angle\n"
"float64  tilt_angle\n"
"\n"
;
  }

  static const char* value(const ::svaya_control::SafetyData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svaya_control::SafetyData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Robot_limits);
      stream.next(m.JointLimitdata);
      stream.next(m.SafetyPlanedata);
      stream.next(m.Tooldata);
      stream.next(m.SafetyInputIo);
      stream.next(m.underSingularity);
      stream.next(m.too_close_point);
      stream.next(m.safety_flag);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafetyData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svaya_control::SafetyData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svaya_control::SafetyData_<ContainerAllocator>& v)
  {
    s << indent << "Robot_limits[]" << std::endl;
    for (size_t i = 0; i < v.Robot_limits.size(); ++i)
    {
      s << indent << "  Robot_limits[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.Robot_limits[i]);
    }
    s << indent << "JointLimitdata[]" << std::endl;
    for (size_t i = 0; i < v.JointLimitdata.size(); ++i)
    {
      s << indent << "  JointLimitdata[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::svaya_control::JointLimit_<ContainerAllocator> >::stream(s, indent + "    ", v.JointLimitdata[i]);
    }
    s << indent << "SafetyPlanedata[]" << std::endl;
    for (size_t i = 0; i < v.SafetyPlanedata.size(); ++i)
    {
      s << indent << "  SafetyPlanedata[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::svaya_control::SafetyPlane_<ContainerAllocator> >::stream(s, indent + "    ", v.SafetyPlanedata[i]);
    }
    s << indent << "Tooldata[]" << std::endl;
    for (size_t i = 0; i < v.Tooldata.size(); ++i)
    {
      s << indent << "  Tooldata[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::svaya_control::Tool_<ContainerAllocator> >::stream(s, indent + "    ", v.Tooldata[i]);
    }
    s << indent << "SafetyInputIo[]" << std::endl;
    for (size_t i = 0; i < v.SafetyInputIo.size(); ++i)
    {
      s << indent << "  SafetyInputIo[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.SafetyInputIo[i]);
    }
    s << indent << "underSingularity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.underSingularity);
    s << indent << "too_close_point: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.too_close_point);
    s << indent << "safety_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safety_flag);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVAYA_CONTROL_MESSAGE_SAFETYDATA_H
