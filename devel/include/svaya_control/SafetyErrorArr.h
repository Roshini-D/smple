// Generated by gencpp from file svaya_control/SafetyErrorArr.msg
// DO NOT EDIT!


#ifndef SVAYA_CONTROL_MESSAGE_SAFETYERRORARR_H
#define SVAYA_CONTROL_MESSAGE_SAFETYERRORARR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <svaya_control/SafetyError.h>

namespace svaya_control
{
template <class ContainerAllocator>
struct SafetyErrorArr_
{
  typedef SafetyErrorArr_<ContainerAllocator> Type;

  SafetyErrorArr_()
    : msgdata()  {
    }
  SafetyErrorArr_(const ContainerAllocator& _alloc)
    : msgdata(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::svaya_control::SafetyError_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::svaya_control::SafetyError_<ContainerAllocator> >::other >  _msgdata_type;
  _msgdata_type msgdata;





  typedef boost::shared_ptr< ::svaya_control::SafetyErrorArr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svaya_control::SafetyErrorArr_<ContainerAllocator> const> ConstPtr;

}; // struct SafetyErrorArr_

typedef ::svaya_control::SafetyErrorArr_<std::allocator<void> > SafetyErrorArr;

typedef boost::shared_ptr< ::svaya_control::SafetyErrorArr > SafetyErrorArrPtr;
typedef boost::shared_ptr< ::svaya_control::SafetyErrorArr const> SafetyErrorArrConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svaya_control::SafetyErrorArr_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svaya_control::SafetyErrorArr_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::svaya_control::SafetyErrorArr_<ContainerAllocator1> & lhs, const ::svaya_control::SafetyErrorArr_<ContainerAllocator2> & rhs)
{
  return lhs.msgdata == rhs.msgdata;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::svaya_control::SafetyErrorArr_<ContainerAllocator1> & lhs, const ::svaya_control::SafetyErrorArr_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace svaya_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::SafetyErrorArr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::SafetyErrorArr_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::SafetyErrorArr_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::SafetyErrorArr_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::SafetyErrorArr_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::SafetyErrorArr_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svaya_control::SafetyErrorArr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dee21b917a60d8be2263a10f8e5c4054";
  }

  static const char* value(const ::svaya_control::SafetyErrorArr_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdee21b917a60d8beULL;
  static const uint64_t static_value2 = 0x2263a10f8e5c4054ULL;
};

template<class ContainerAllocator>
struct DataType< ::svaya_control::SafetyErrorArr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svaya_control/SafetyErrorArr";
  }

  static const char* value(const ::svaya_control::SafetyErrorArr_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svaya_control::SafetyErrorArr_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SafetyError[] msgdata\n"
"\n"
"================================================================================\n"
"MSG: svaya_control/SafetyError\n"
"float64[] error_list\n"
"bool mode_of_operation\n"
"bool recovery_mode_flag\n"
"bool safety_limits_flag\n"
"int32[] status\n"
;
  }

  static const char* value(const ::svaya_control::SafetyErrorArr_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svaya_control::SafetyErrorArr_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.msgdata);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafetyErrorArr_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svaya_control::SafetyErrorArr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svaya_control::SafetyErrorArr_<ContainerAllocator>& v)
  {
    s << indent << "msgdata[]" << std::endl;
    for (size_t i = 0; i < v.msgdata.size(); ++i)
    {
      s << indent << "  msgdata[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::svaya_control::SafetyError_<ContainerAllocator> >::stream(s, indent + "    ", v.msgdata[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVAYA_CONTROL_MESSAGE_SAFETYERRORARR_H
