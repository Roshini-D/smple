// Generated by gencpp from file svaya_control/SafetyError.msg
// DO NOT EDIT!


#ifndef SVAYA_CONTROL_MESSAGE_SAFETYERROR_H
#define SVAYA_CONTROL_MESSAGE_SAFETYERROR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace svaya_control
{
template <class ContainerAllocator>
struct SafetyError_
{
  typedef SafetyError_<ContainerAllocator> Type;

  SafetyError_()
    : error_list()
    , mode_of_operation(false)
    , recovery_mode_flag(false)
    , safety_limits_flag(false)
    , status()  {
    }
  SafetyError_(const ContainerAllocator& _alloc)
    : error_list(_alloc)
    , mode_of_operation(false)
    , recovery_mode_flag(false)
    , safety_limits_flag(false)
    , status(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _error_list_type;
  _error_list_type error_list;

   typedef uint8_t _mode_of_operation_type;
  _mode_of_operation_type mode_of_operation;

   typedef uint8_t _recovery_mode_flag_type;
  _recovery_mode_flag_type recovery_mode_flag;

   typedef uint8_t _safety_limits_flag_type;
  _safety_limits_flag_type safety_limits_flag;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::svaya_control::SafetyError_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svaya_control::SafetyError_<ContainerAllocator> const> ConstPtr;

}; // struct SafetyError_

typedef ::svaya_control::SafetyError_<std::allocator<void> > SafetyError;

typedef boost::shared_ptr< ::svaya_control::SafetyError > SafetyErrorPtr;
typedef boost::shared_ptr< ::svaya_control::SafetyError const> SafetyErrorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svaya_control::SafetyError_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svaya_control::SafetyError_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::svaya_control::SafetyError_<ContainerAllocator1> & lhs, const ::svaya_control::SafetyError_<ContainerAllocator2> & rhs)
{
  return lhs.error_list == rhs.error_list &&
    lhs.mode_of_operation == rhs.mode_of_operation &&
    lhs.recovery_mode_flag == rhs.recovery_mode_flag &&
    lhs.safety_limits_flag == rhs.safety_limits_flag &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::svaya_control::SafetyError_<ContainerAllocator1> & lhs, const ::svaya_control::SafetyError_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace svaya_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::SafetyError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::SafetyError_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::SafetyError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::SafetyError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::SafetyError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::SafetyError_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svaya_control::SafetyError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "effb15012df92429b21d6d9d6f7df6c3";
  }

  static const char* value(const ::svaya_control::SafetyError_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeffb15012df92429ULL;
  static const uint64_t static_value2 = 0xb21d6d9d6f7df6c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::svaya_control::SafetyError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svaya_control/SafetyError";
  }

  static const char* value(const ::svaya_control::SafetyError_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svaya_control::SafetyError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[] error_list\n"
"bool mode_of_operation\n"
"bool recovery_mode_flag\n"
"bool safety_limits_flag\n"
"int32[] status\n"
;
  }

  static const char* value(const ::svaya_control::SafetyError_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svaya_control::SafetyError_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.error_list);
      stream.next(m.mode_of_operation);
      stream.next(m.recovery_mode_flag);
      stream.next(m.safety_limits_flag);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafetyError_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svaya_control::SafetyError_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svaya_control::SafetyError_<ContainerAllocator>& v)
  {
    s << indent << "error_list[]" << std::endl;
    for (size_t i = 0; i < v.error_list.size(); ++i)
    {
      s << indent << "  error_list[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.error_list[i]);
    }
    s << indent << "mode_of_operation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mode_of_operation);
    s << indent << "recovery_mode_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.recovery_mode_flag);
    s << indent << "safety_limits_flag: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.safety_limits_flag);
    s << indent << "status[]" << std::endl;
    for (size_t i = 0; i < v.status.size(); ++i)
    {
      s << indent << "  status[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.status[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVAYA_CONTROL_MESSAGE_SAFETYERROR_H
