// Generated by gencpp from file svaya_control/SafetyPlane.msg
// DO NOT EDIT!


#ifndef SVAYA_CONTROL_MESSAGE_SAFETYPLANE_H
#define SVAYA_CONTROL_MESSAGE_SAFETYPLANE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace svaya_control
{
template <class ContainerAllocator>
struct SafetyPlane_
{
  typedef SafetyPlane_<ContainerAllocator> Type;

  SafetyPlane_()
    : plane_cnt(0)
    , plane_origin_x()
    , plane_origin_y()
    , plane_origin_z()
    , normal_dir_x()
    , normal_dir_y()
    , normal_dir_z()
    , safety_feat()
    , elbow_restrict()  {
    }
  SafetyPlane_(const ContainerAllocator& _alloc)
    : plane_cnt(0)
    , plane_origin_x(_alloc)
    , plane_origin_y(_alloc)
    , plane_origin_z(_alloc)
    , normal_dir_x(_alloc)
    , normal_dir_y(_alloc)
    , normal_dir_z(_alloc)
    , safety_feat(_alloc)
    , elbow_restrict(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _plane_cnt_type;
  _plane_cnt_type plane_cnt;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _plane_origin_x_type;
  _plane_origin_x_type plane_origin_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _plane_origin_y_type;
  _plane_origin_y_type plane_origin_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _plane_origin_z_type;
  _plane_origin_z_type plane_origin_z;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _normal_dir_x_type;
  _normal_dir_x_type normal_dir_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _normal_dir_y_type;
  _normal_dir_y_type normal_dir_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _normal_dir_z_type;
  _normal_dir_z_type normal_dir_z;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _safety_feat_type;
  _safety_feat_type safety_feat;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _elbow_restrict_type;
  _elbow_restrict_type elbow_restrict;





  typedef boost::shared_ptr< ::svaya_control::SafetyPlane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svaya_control::SafetyPlane_<ContainerAllocator> const> ConstPtr;

}; // struct SafetyPlane_

typedef ::svaya_control::SafetyPlane_<std::allocator<void> > SafetyPlane;

typedef boost::shared_ptr< ::svaya_control::SafetyPlane > SafetyPlanePtr;
typedef boost::shared_ptr< ::svaya_control::SafetyPlane const> SafetyPlaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svaya_control::SafetyPlane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svaya_control::SafetyPlane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::svaya_control::SafetyPlane_<ContainerAllocator1> & lhs, const ::svaya_control::SafetyPlane_<ContainerAllocator2> & rhs)
{
  return lhs.plane_cnt == rhs.plane_cnt &&
    lhs.plane_origin_x == rhs.plane_origin_x &&
    lhs.plane_origin_y == rhs.plane_origin_y &&
    lhs.plane_origin_z == rhs.plane_origin_z &&
    lhs.normal_dir_x == rhs.normal_dir_x &&
    lhs.normal_dir_y == rhs.normal_dir_y &&
    lhs.normal_dir_z == rhs.normal_dir_z &&
    lhs.safety_feat == rhs.safety_feat &&
    lhs.elbow_restrict == rhs.elbow_restrict;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::svaya_control::SafetyPlane_<ContainerAllocator1> & lhs, const ::svaya_control::SafetyPlane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace svaya_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::SafetyPlane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::SafetyPlane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::SafetyPlane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::SafetyPlane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::SafetyPlane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::SafetyPlane_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svaya_control::SafetyPlane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "660c688686d98eb493ccc943cb987589";
  }

  static const char* value(const ::svaya_control::SafetyPlane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x660c688686d98eb4ULL;
  static const uint64_t static_value2 = 0x93ccc943cb987589ULL;
};

template<class ContainerAllocator>
struct DataType< ::svaya_control::SafetyPlane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svaya_control/SafetyPlane";
  }

  static const char* value(const ::svaya_control::SafetyPlane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svaya_control::SafetyPlane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 plane_cnt\n"
"float64[]  plane_origin_x\n"
"float64[]  plane_origin_y\n"
"float64[]  plane_origin_z\n"
"\n"
"float64[]  normal_dir_x\n"
"float64[]  normal_dir_y\n"
"float64[]  normal_dir_z\n"
"\n"
"float64[]  safety_feat\n"
"float64[]  elbow_restrict\n"
;
  }

  static const char* value(const ::svaya_control::SafetyPlane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svaya_control::SafetyPlane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.plane_cnt);
      stream.next(m.plane_origin_x);
      stream.next(m.plane_origin_y);
      stream.next(m.plane_origin_z);
      stream.next(m.normal_dir_x);
      stream.next(m.normal_dir_y);
      stream.next(m.normal_dir_z);
      stream.next(m.safety_feat);
      stream.next(m.elbow_restrict);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SafetyPlane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svaya_control::SafetyPlane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svaya_control::SafetyPlane_<ContainerAllocator>& v)
  {
    s << indent << "plane_cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.plane_cnt);
    s << indent << "plane_origin_x[]" << std::endl;
    for (size_t i = 0; i < v.plane_origin_x.size(); ++i)
    {
      s << indent << "  plane_origin_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.plane_origin_x[i]);
    }
    s << indent << "plane_origin_y[]" << std::endl;
    for (size_t i = 0; i < v.plane_origin_y.size(); ++i)
    {
      s << indent << "  plane_origin_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.plane_origin_y[i]);
    }
    s << indent << "plane_origin_z[]" << std::endl;
    for (size_t i = 0; i < v.plane_origin_z.size(); ++i)
    {
      s << indent << "  plane_origin_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.plane_origin_z[i]);
    }
    s << indent << "normal_dir_x[]" << std::endl;
    for (size_t i = 0; i < v.normal_dir_x.size(); ++i)
    {
      s << indent << "  normal_dir_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.normal_dir_x[i]);
    }
    s << indent << "normal_dir_y[]" << std::endl;
    for (size_t i = 0; i < v.normal_dir_y.size(); ++i)
    {
      s << indent << "  normal_dir_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.normal_dir_y[i]);
    }
    s << indent << "normal_dir_z[]" << std::endl;
    for (size_t i = 0; i < v.normal_dir_z.size(); ++i)
    {
      s << indent << "  normal_dir_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.normal_dir_z[i]);
    }
    s << indent << "safety_feat[]" << std::endl;
    for (size_t i = 0; i < v.safety_feat.size(); ++i)
    {
      s << indent << "  safety_feat[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.safety_feat[i]);
    }
    s << indent << "elbow_restrict[]" << std::endl;
    for (size_t i = 0; i < v.elbow_restrict.size(); ++i)
    {
      s << indent << "  elbow_restrict[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.elbow_restrict[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVAYA_CONTROL_MESSAGE_SAFETYPLANE_H
