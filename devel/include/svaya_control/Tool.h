// Generated by gencpp from file svaya_control/Tool.msg
// DO NOT EDIT!


#ifndef SVAYA_CONTROL_MESSAGE_TOOL_H
#define SVAYA_CONTROL_MESSAGE_TOOL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace svaya_control
{
template <class ContainerAllocator>
struct Tool_
{
  typedef Tool_<ContainerAllocator> Type;

  Tool_()
    : tool_cnt(0)
    , tool_position_x()
    , tool_position_y()
    , tool_position_z()
    , tool_radius()
    , cone_orient_x(0.0)
    , cone_orient_y(0.0)
    , cone_orient_z(0.0)
    , tool_direction_feat(0.0)
    , solid_angle(0.0)
    , pan_angle(0.0)
    , tilt_angle(0.0)  {
    }
  Tool_(const ContainerAllocator& _alloc)
    : tool_cnt(0)
    , tool_position_x(_alloc)
    , tool_position_y(_alloc)
    , tool_position_z(_alloc)
    , tool_radius(_alloc)
    , cone_orient_x(0.0)
    , cone_orient_y(0.0)
    , cone_orient_z(0.0)
    , tool_direction_feat(0.0)
    , solid_angle(0.0)
    , pan_angle(0.0)
    , tilt_angle(0.0)  {
  (void)_alloc;
    }



   typedef uint8_t _tool_cnt_type;
  _tool_cnt_type tool_cnt;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_position_x_type;
  _tool_position_x_type tool_position_x;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_position_y_type;
  _tool_position_y_type tool_position_y;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_position_z_type;
  _tool_position_z_type tool_position_z;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _tool_radius_type;
  _tool_radius_type tool_radius;

   typedef double _cone_orient_x_type;
  _cone_orient_x_type cone_orient_x;

   typedef double _cone_orient_y_type;
  _cone_orient_y_type cone_orient_y;

   typedef double _cone_orient_z_type;
  _cone_orient_z_type cone_orient_z;

   typedef double _tool_direction_feat_type;
  _tool_direction_feat_type tool_direction_feat;

   typedef double _solid_angle_type;
  _solid_angle_type solid_angle;

   typedef double _pan_angle_type;
  _pan_angle_type pan_angle;

   typedef double _tilt_angle_type;
  _tilt_angle_type tilt_angle;





  typedef boost::shared_ptr< ::svaya_control::Tool_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svaya_control::Tool_<ContainerAllocator> const> ConstPtr;

}; // struct Tool_

typedef ::svaya_control::Tool_<std::allocator<void> > Tool;

typedef boost::shared_ptr< ::svaya_control::Tool > ToolPtr;
typedef boost::shared_ptr< ::svaya_control::Tool const> ToolConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svaya_control::Tool_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svaya_control::Tool_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::svaya_control::Tool_<ContainerAllocator1> & lhs, const ::svaya_control::Tool_<ContainerAllocator2> & rhs)
{
  return lhs.tool_cnt == rhs.tool_cnt &&
    lhs.tool_position_x == rhs.tool_position_x &&
    lhs.tool_position_y == rhs.tool_position_y &&
    lhs.tool_position_z == rhs.tool_position_z &&
    lhs.tool_radius == rhs.tool_radius &&
    lhs.cone_orient_x == rhs.cone_orient_x &&
    lhs.cone_orient_y == rhs.cone_orient_y &&
    lhs.cone_orient_z == rhs.cone_orient_z &&
    lhs.tool_direction_feat == rhs.tool_direction_feat &&
    lhs.solid_angle == rhs.solid_angle &&
    lhs.pan_angle == rhs.pan_angle &&
    lhs.tilt_angle == rhs.tilt_angle;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::svaya_control::Tool_<ContainerAllocator1> & lhs, const ::svaya_control::Tool_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace svaya_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::Tool_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::Tool_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::Tool_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::Tool_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::Tool_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::Tool_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svaya_control::Tool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3ee97d849631d40fd56f1eb1fec29f41";
  }

  static const char* value(const ::svaya_control::Tool_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3ee97d849631d40fULL;
  static const uint64_t static_value2 = 0xd56f1eb1fec29f41ULL;
};

template<class ContainerAllocator>
struct DataType< ::svaya_control::Tool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svaya_control/Tool";
  }

  static const char* value(const ::svaya_control::Tool_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svaya_control::Tool_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 tool_cnt\n"
"float64[]  tool_position_x\n"
"float64[]  tool_position_y\n"
"float64[]  tool_position_z\n"
"float64[]  tool_radius\n"
"\n"
"float64  cone_orient_x\n"
"float64  cone_orient_y\n"
"float64  cone_orient_z\n"
"float64  tool_direction_feat\n"
"float64  solid_angle\n"
"float64  pan_angle\n"
"float64  tilt_angle\n"
"\n"
;
  }

  static const char* value(const ::svaya_control::Tool_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svaya_control::Tool_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tool_cnt);
      stream.next(m.tool_position_x);
      stream.next(m.tool_position_y);
      stream.next(m.tool_position_z);
      stream.next(m.tool_radius);
      stream.next(m.cone_orient_x);
      stream.next(m.cone_orient_y);
      stream.next(m.cone_orient_z);
      stream.next(m.tool_direction_feat);
      stream.next(m.solid_angle);
      stream.next(m.pan_angle);
      stream.next(m.tilt_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Tool_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svaya_control::Tool_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svaya_control::Tool_<ContainerAllocator>& v)
  {
    s << indent << "tool_cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tool_cnt);
    s << indent << "tool_position_x[]" << std::endl;
    for (size_t i = 0; i < v.tool_position_x.size(); ++i)
    {
      s << indent << "  tool_position_x[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_position_x[i]);
    }
    s << indent << "tool_position_y[]" << std::endl;
    for (size_t i = 0; i < v.tool_position_y.size(); ++i)
    {
      s << indent << "  tool_position_y[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_position_y[i]);
    }
    s << indent << "tool_position_z[]" << std::endl;
    for (size_t i = 0; i < v.tool_position_z.size(); ++i)
    {
      s << indent << "  tool_position_z[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_position_z[i]);
    }
    s << indent << "tool_radius[]" << std::endl;
    for (size_t i = 0; i < v.tool_radius.size(); ++i)
    {
      s << indent << "  tool_radius[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.tool_radius[i]);
    }
    s << indent << "cone_orient_x: ";
    Printer<double>::stream(s, indent + "  ", v.cone_orient_x);
    s << indent << "cone_orient_y: ";
    Printer<double>::stream(s, indent + "  ", v.cone_orient_y);
    s << indent << "cone_orient_z: ";
    Printer<double>::stream(s, indent + "  ", v.cone_orient_z);
    s << indent << "tool_direction_feat: ";
    Printer<double>::stream(s, indent + "  ", v.tool_direction_feat);
    s << indent << "solid_angle: ";
    Printer<double>::stream(s, indent + "  ", v.solid_angle);
    s << indent << "pan_angle: ";
    Printer<double>::stream(s, indent + "  ", v.pan_angle);
    s << indent << "tilt_angle: ";
    Printer<double>::stream(s, indent + "  ", v.tilt_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVAYA_CONTROL_MESSAGE_TOOL_H
