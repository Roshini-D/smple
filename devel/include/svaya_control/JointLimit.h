// Generated by gencpp from file svaya_control/JointLimit.msg
// DO NOT EDIT!


#ifndef SVAYA_CONTROL_MESSAGE_JOINTLIMIT_H
#define SVAYA_CONTROL_MESSAGE_JOINTLIMIT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace svaya_control
{
template <class ContainerAllocator>
struct JointLimit_
{
  typedef JointLimit_<ContainerAllocator> Type;

  JointLimit_()
    : joint_cnt(0)
    , joint_max_pos_limit_normal_mode()
    , joint_min_pos_limit_normal_mode()
    , joint_max_pos_limit_reduced_mode()
    , joint_min_pos_limit_reduced_mode()
    , joint_vel_limit_reduced_mode()
    , joint_vel_limit_normal_mode()  {
    }
  JointLimit_(const ContainerAllocator& _alloc)
    : joint_cnt(0)
    , joint_max_pos_limit_normal_mode(_alloc)
    , joint_min_pos_limit_normal_mode(_alloc)
    , joint_max_pos_limit_reduced_mode(_alloc)
    , joint_min_pos_limit_reduced_mode(_alloc)
    , joint_vel_limit_reduced_mode(_alloc)
    , joint_vel_limit_normal_mode(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _joint_cnt_type;
  _joint_cnt_type joint_cnt;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_max_pos_limit_normal_mode_type;
  _joint_max_pos_limit_normal_mode_type joint_max_pos_limit_normal_mode;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_min_pos_limit_normal_mode_type;
  _joint_min_pos_limit_normal_mode_type joint_min_pos_limit_normal_mode;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_max_pos_limit_reduced_mode_type;
  _joint_max_pos_limit_reduced_mode_type joint_max_pos_limit_reduced_mode;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_min_pos_limit_reduced_mode_type;
  _joint_min_pos_limit_reduced_mode_type joint_min_pos_limit_reduced_mode;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_vel_limit_reduced_mode_type;
  _joint_vel_limit_reduced_mode_type joint_vel_limit_reduced_mode;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _joint_vel_limit_normal_mode_type;
  _joint_vel_limit_normal_mode_type joint_vel_limit_normal_mode;





  typedef boost::shared_ptr< ::svaya_control::JointLimit_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::svaya_control::JointLimit_<ContainerAllocator> const> ConstPtr;

}; // struct JointLimit_

typedef ::svaya_control::JointLimit_<std::allocator<void> > JointLimit;

typedef boost::shared_ptr< ::svaya_control::JointLimit > JointLimitPtr;
typedef boost::shared_ptr< ::svaya_control::JointLimit const> JointLimitConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::svaya_control::JointLimit_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::svaya_control::JointLimit_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::svaya_control::JointLimit_<ContainerAllocator1> & lhs, const ::svaya_control::JointLimit_<ContainerAllocator2> & rhs)
{
  return lhs.joint_cnt == rhs.joint_cnt &&
    lhs.joint_max_pos_limit_normal_mode == rhs.joint_max_pos_limit_normal_mode &&
    lhs.joint_min_pos_limit_normal_mode == rhs.joint_min_pos_limit_normal_mode &&
    lhs.joint_max_pos_limit_reduced_mode == rhs.joint_max_pos_limit_reduced_mode &&
    lhs.joint_min_pos_limit_reduced_mode == rhs.joint_min_pos_limit_reduced_mode &&
    lhs.joint_vel_limit_reduced_mode == rhs.joint_vel_limit_reduced_mode &&
    lhs.joint_vel_limit_normal_mode == rhs.joint_vel_limit_normal_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::svaya_control::JointLimit_<ContainerAllocator1> & lhs, const ::svaya_control::JointLimit_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace svaya_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::JointLimit_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::svaya_control::JointLimit_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::JointLimit_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::svaya_control::JointLimit_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::JointLimit_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::svaya_control::JointLimit_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::svaya_control::JointLimit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5401a4925cdae95fe53c373fe45e169d";
  }

  static const char* value(const ::svaya_control::JointLimit_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5401a4925cdae95fULL;
  static const uint64_t static_value2 = 0xe53c373fe45e169dULL;
};

template<class ContainerAllocator>
struct DataType< ::svaya_control::JointLimit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "svaya_control/JointLimit";
  }

  static const char* value(const ::svaya_control::JointLimit_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::svaya_control::JointLimit_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 joint_cnt\n"
"float64[] joint_max_pos_limit_normal_mode\n"
"float64[] joint_min_pos_limit_normal_mode\n"
"float64[] joint_max_pos_limit_reduced_mode\n"
"float64[] joint_min_pos_limit_reduced_mode\n"
"float64[] joint_vel_limit_reduced_mode\n"
"float64[] joint_vel_limit_normal_mode\n"
"\n"
;
  }

  static const char* value(const ::svaya_control::JointLimit_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::svaya_control::JointLimit_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_cnt);
      stream.next(m.joint_max_pos_limit_normal_mode);
      stream.next(m.joint_min_pos_limit_normal_mode);
      stream.next(m.joint_max_pos_limit_reduced_mode);
      stream.next(m.joint_min_pos_limit_reduced_mode);
      stream.next(m.joint_vel_limit_reduced_mode);
      stream.next(m.joint_vel_limit_normal_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointLimit_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::svaya_control::JointLimit_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::svaya_control::JointLimit_<ContainerAllocator>& v)
  {
    s << indent << "joint_cnt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.joint_cnt);
    s << indent << "joint_max_pos_limit_normal_mode[]" << std::endl;
    for (size_t i = 0; i < v.joint_max_pos_limit_normal_mode.size(); ++i)
    {
      s << indent << "  joint_max_pos_limit_normal_mode[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_max_pos_limit_normal_mode[i]);
    }
    s << indent << "joint_min_pos_limit_normal_mode[]" << std::endl;
    for (size_t i = 0; i < v.joint_min_pos_limit_normal_mode.size(); ++i)
    {
      s << indent << "  joint_min_pos_limit_normal_mode[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_min_pos_limit_normal_mode[i]);
    }
    s << indent << "joint_max_pos_limit_reduced_mode[]" << std::endl;
    for (size_t i = 0; i < v.joint_max_pos_limit_reduced_mode.size(); ++i)
    {
      s << indent << "  joint_max_pos_limit_reduced_mode[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_max_pos_limit_reduced_mode[i]);
    }
    s << indent << "joint_min_pos_limit_reduced_mode[]" << std::endl;
    for (size_t i = 0; i < v.joint_min_pos_limit_reduced_mode.size(); ++i)
    {
      s << indent << "  joint_min_pos_limit_reduced_mode[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_min_pos_limit_reduced_mode[i]);
    }
    s << indent << "joint_vel_limit_reduced_mode[]" << std::endl;
    for (size_t i = 0; i < v.joint_vel_limit_reduced_mode.size(); ++i)
    {
      s << indent << "  joint_vel_limit_reduced_mode[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_vel_limit_reduced_mode[i]);
    }
    s << indent << "joint_vel_limit_normal_mode[]" << std::endl;
    for (size_t i = 0; i < v.joint_vel_limit_normal_mode.size(); ++i)
    {
      s << indent << "  joint_vel_limit_normal_mode[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.joint_vel_limit_normal_mode[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // SVAYA_CONTROL_MESSAGE_JOINTLIMIT_H
