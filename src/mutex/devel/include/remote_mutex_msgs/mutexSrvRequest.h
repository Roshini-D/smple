// Generated by gencpp from file remote_mutex_msgs/mutexSrvRequest.msg
// DO NOT EDIT!


#ifndef REMOTE_MUTEX_MSGS_MESSAGE_MUTEXSRVREQUEST_H
#define REMOTE_MUTEX_MSGS_MESSAGE_MUTEXSRVREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace remote_mutex_msgs
{
template <class ContainerAllocator>
struct mutexSrvRequest_
{
  typedef mutexSrvRequest_<ContainerAllocator> Type;

  mutexSrvRequest_()
    : requestor()
    , requestType(0)  {
    }
  mutexSrvRequest_(const ContainerAllocator& _alloc)
    : requestor(_alloc)
    , requestType(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _requestor_type;
  _requestor_type requestor;

   typedef uint8_t _requestType_type;
  _requestType_type requestType;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TYPE_LOCK)
  #undef TYPE_LOCK
#endif
#if defined(_WIN32) && defined(TYPE_UNLOCK)
  #undef TYPE_UNLOCK
#endif
#if defined(_WIN32) && defined(TYPE_POLL)
  #undef TYPE_POLL
#endif

  enum {
    TYPE_LOCK = 1u,
    TYPE_UNLOCK = 2u,
    TYPE_POLL = 3u,
  };


  typedef boost::shared_ptr< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct mutexSrvRequest_

typedef ::remote_mutex_msgs::mutexSrvRequest_<std::allocator<void> > mutexSrvRequest;

typedef boost::shared_ptr< ::remote_mutex_msgs::mutexSrvRequest > mutexSrvRequestPtr;
typedef boost::shared_ptr< ::remote_mutex_msgs::mutexSrvRequest const> mutexSrvRequestConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator1> & lhs, const ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.requestor == rhs.requestor &&
    lhs.requestType == rhs.requestType;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator1> & lhs, const ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace remote_mutex_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "92c5b59df7e6f9662ed83c871edc5264";
  }

  static const char* value(const ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x92c5b59df7e6f966ULL;
  static const uint64_t static_value2 = 0x2ed83c871edc5264ULL;
};

template<class ContainerAllocator>
struct DataType< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "remote_mutex_msgs/mutexSrvRequest";
  }

  static const char* value(const ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string requestor\n"
"uint8 requestType\n"
"uint8 TYPE_LOCK = 1\n"
"uint8 TYPE_UNLOCK = 2\n"
"uint8 TYPE_POLL = 3\n"
;
  }

  static const char* value(const ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.requestor);
      stream.next(m.requestType);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mutexSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::remote_mutex_msgs::mutexSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "requestor: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.requestor);
    s << indent << "requestType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.requestType);
  }
};

} // namespace message_operations
} // namespace ros

#endif // REMOTE_MUTEX_MSGS_MESSAGE_MUTEXSRVREQUEST_H
